/**
 * UniversalPedagogyController - Contr√¥leur pour l'IA de Transformation P√©dagogique Universelle
 * Int√®gre le syst√®me de transformation automatique dans l'application EduLearning+
 */
class UniversalPedagogyController extends BaseController {
    constructor(models, view, eventBus) {
        super();
        this.models = models;
        this.view = view;
        this.eventBus = eventBus;
        this.universalPedagogyModel = new UniversalPedagogyModel();
        
        // √âtats du processus de transformation
        this.currentAnalysis = null;
        this.currentResources = [];
        this.generatedDocument = null;
        
        this.init();
    }

    /**
     * Initialiser le contr√¥leur
     */
    init() {
        this.setupEventListeners();
        this.setupModelObservers();
        
        // Int√©grer l'IA universelle dans le syst√®me existant
        this.integrateWithExistingSystem();
        
        console.log('üß† Contr√¥leur IA P√©dagogique Universelle initialis√©');
    }

    /**
     * Configurer les √©couteurs d'√©v√©nements
     */
    setupEventListeners() {
        // √âcouter les demandes de transformation universelle
        this.eventBus.on('universal-pedagogy:transform', (data) => {
            this.handleUniversalTransformation(data);
        });

        // √âcouter les changements d'accessibilit√©
        this.eventBus.on('accessibility:toggle', (feature) => {
            this.handleAccessibilityToggle(feature);
        });

        // √âcouter les demandes d'analyse disciplinaire
        this.eventBus.on('discipline:analyze', (content) => {
            this.handleDisciplineAnalysis(content);
        });

        // √âcouter les demandes de g√©n√©ration de ressources
        this.eventBus.on('resources:generate', (analysis) => {
            this.handleResourceGeneration(analysis);
        });
    }

    /**
     * Configurer les observateurs de mod√®les
     */
    setupModelObservers() {
        this.universalPedagogyModel.addObserver((event, data) => {
            this.handleModelEvent(event, data);
        });

        // Observer les changements dans les autres mod√®les
        this.models.resource.addObserver((event, data) => {
            if (event === 'resourceCreated') {
                this.onResourceCreated(data);
            }
        });
    }

    /**
     * Int√©grer avec le syst√®me existant
     */
    integrateWithExistingSystem() {
        // Ajouter l'option de transformation universelle au menu d'upload
        this.addUniversalTransformationOption();
        
        // √âtendre les formats existants avec les options d'accessibilit√©
        this.extendExistingFormats();
        
        // Ajouter les outils d'accessibilit√© √† l'interface
        this.addAccessibilityTools();
    }

    /**
     * Ajouter l'option de transformation universelle
     */
    addUniversalTransformationOption() {
        const universalOption = {
            id: 'universal-accessible',
            name: 'Transformation Universelle Accessible',
            description: 'IA avanc√©e pour toutes disciplines avec accessibilit√© compl√®te',
            icon: 'üß†',
            features: [
                'D√©tection automatique de discipline',
                'Accessibilit√© WCAG AAA',
                'Adaptation multi-niveaux',
                'Mini-jeux int√©gr√©s',
                'Export PDF accessible'
            ]
        };

        // Ajouter cette option aux formats disponibles
        this.eventBus.emit('format:add', universalOption);
    }

    /**
     * G√©rer la transformation universelle
     */
    async handleUniversalTransformation(data) {
        try {
            const { file, content, metadata = {} } = data;
            
            // √âtape 1 : Analyse universelle du document
            this.showProgress('Analyse du document...', 10);
            const analysis = await this.universalPedagogyModel.analyzeDocument(content, {
                fileName: file?.name,
                fileType: file?.type,
                fileSize: file?.size,
                ...metadata
            });

            this.currentAnalysis = analysis;
            this.showProgress('Document analys√©', 25);

            // √âtape 2 : Recherche de ressources disciplinaires
            this.showProgress('Recherche de ressources...', 40);
            const resources = await this.universalPedagogyModel.searchDisciplinaryResources(analysis);
            this.currentResources = resources;
            this.showProgress('Ressources identifi√©es', 55);

            // √âtape 3 : G√©n√©ration du document accessible
            this.showProgress('G√©n√©ration du document accessible...', 70);
            const accessibleDocument = await this.universalPedagogyModel.generateAccessibleDocument(
                analysis, resources
            );
            this.generatedDocument = accessibleDocument;
            this.showProgress('Document g√©n√©r√©', 85);

            // √âtape 4 : Validation d'accessibilit√©
            this.showProgress('Validation d\'accessibilit√©...', 95);
            const accessibilityValidation = this.universalPedagogyModel.validateAccessibility(accessibleDocument);
            
            this.showProgress('Transformation termin√©e !', 100);

            // Afficher les r√©sultats
            setTimeout(() => {
                this.showTransformationResults({
                    analysis,
                    resources,
                    document: accessibleDocument,
                    validation: accessibilityValidation
                });
            }, 500);

        } catch (error) {
            console.error('Erreur lors de la transformation universelle:', error);
            this.showError('Erreur lors de la transformation', error.message);
        }
    }

    /**
     * Afficher la progression
     */
    showProgress(message, percentage) {
        this.eventBus.emit('notification', {
            type: 'info',
            message: `${message} (${percentage}%)`,
            progress: percentage
        });
    }

    /**
     * Afficher les r√©sultats de la transformation
     */
    showTransformationResults(results) {
        const { analysis, resources, document, validation } = results;
        
        // Cr√©er le modal de r√©sultats
        const modalContent = this.generateResultsModalContent(results);
        
        // Afficher le modal avec les r√©sultats
        this.view.createModal(
            'üéâ Transformation Universelle Termin√©e',
            modalContent,
            [
                {
                    text: 'üëÅÔ∏è Pr√©visualiser',
                    class: 'btn-primary',
                    action: 'preview-document'
                },
                {
                    text: 'üì• T√©l√©charger HTML',
                    class: 'btn-success',
                    action: 'download-html'
                },
                {
                    text: 'üìÑ Exporter PDF',
                    class: 'btn-warning',
                    action: 'export-pdf'
                },
                {
                    text: 'üìä Voir Analyse',
                    class: 'btn-info',
                    action: 'show-analysis'
                }
            ]
        );

        // G√©rer les actions du modal
        this.handleResultActions(results);
    }

    /**
     * G√©n√©rer le contenu du modal de r√©sultats
     */
    generateResultsModalContent(results) {
        const { analysis, validation } = results;
        const discipline = this.universalPedagogyModel.disciplines[analysis.discipline];
        
        return `
            <div class="results-summary">
                <div class="discipline-info" style="text-align: center; margin-bottom: 20px;">
                    <span style="font-size: 3em;">${discipline.icon}</span>
                    <h3>${discipline.name}</h3>
                    <p>Niveau: ${analysis.level} | Type: ${analysis.contentType}</p>
                </div>
                
                <div class="accessibility-score" style="margin-bottom: 20px;">
                    <h4>üìä Score d'Accessibilit√©</h4>
                    <div style="background: #f0f0f0; border-radius: 10px; padding: 10px;">
                        <div style="background: ${validation.score >= 90 ? '#28a745' : validation.score >= 70 ? '#ffc107' : '#dc3545'}; 
                                    height: 20px; width: ${validation.score}%; border-radius: 10px; transition: width 0.5s ease;">
                        </div>
                        <p style="margin-top: 5px; font-weight: bold;">${Math.round(validation.score)}% - ${this.getAccessibilityGrade(validation.score)}</p>
                    </div>
                </div>
                
                <div class="features-generated" style="margin-bottom: 20px;">
                    <h4>‚ú® Fonctionnalit√©s G√©n√©r√©es</h4>
                    <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px;">
                        <div class="feature-card" style="background: #e3f2fd; padding: 10px; border-radius: 8px;">
                            <strong>üéØ Objectifs P√©dagogiques</strong>
                            <p>${Object.keys(analysis.pedagogicalObjectives).length} objectifs identifi√©s</p>
                        </div>
                        <div class="feature-card" style="background: #f3e5f5; padding: 10px; border-radius: 8px;">
                            <strong>üìñ Glossaire</strong>
                            <p>${analysis.specializedVocabulary.length} termes sp√©cialis√©s</p>
                        </div>
                        <div class="feature-card" style="background: #e8f5e8; padding: 10px; border-radius: 8px;">
                            <strong>üéÆ Mini-jeux</strong>
                            <p>${this.universalPedagogyModel.cognitiveBreaks[analysis.discipline]?.length || 4} jeux adaptatifs</p>
                        </div>
                        <div class="feature-card" style="background: #fff3e0; padding: 10px; border-radius: 8px;">
                            <strong>üîß Outils</strong>
                            <p>${discipline.tools.length} outils disciplinaires</p>
                        </div>
                    </div>
                </div>
                
                <div class="accessibility-features" style="margin-bottom: 20px;">
                    <h4>‚ôø Accessibilit√© Int√©gr√©e</h4>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                        ${Object.entries(this.universalPedagogyModel.accessibilityFeatures).map(([key, feature]) => `
                            <span style="background: #667eea; color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.8em;">
                                ${feature.name}
                            </span>
                        `).join('')}
                    </div>
                </div>
                
                <div class="file-info">
                    <h4>üìÅ Fichiers G√©n√©r√©s</h4>
                    <ul>
                        <li>üìÑ Document HTML accessible (${Math.round(new Blob([results.document]).size / 1024)} KB)</li>
                        <li>üìã Guide d'utilisation complet</li>
                        <li>‚öôÔ∏è Configuration d'export PDF</li>
                        <li>üìä Rapport d'analyse d√©taill√©</li>
                    </ul>
                </div>
            </div>
        `;
    }

    /**
     * Obtenir la note d'accessibilit√©
     */
    getAccessibilityGrade(score) {
        if (score >= 95) return 'Excellent (AAA)';
        if (score >= 85) return 'Tr√®s Bon (AA+)';
        if (score >= 75) return 'Bon (AA)';
        if (score >= 65) return 'Correct (A+)';
        if (score >= 50) return 'Acceptable (A)';
        return '√Ä am√©liorer';
    }

    /**
     * G√©rer les actions des r√©sultats
     */
    handleResultActions(results) {
        const modal = document.querySelector('.modal.show');
        if (!modal) return;

        modal.addEventListener('click', (e) => {
            const action = e.target.getAttribute('data-action');
            
            switch (action) {
                case 'preview-document':
                    this.previewDocument(results.document);
                    break;
                case 'download-html':
                    this.downloadHTML(results.document, results.analysis);
                    break;
                case 'export-pdf':
                    this.exportToPDF(results);
                    break;
                case 'show-analysis':
                    this.showDetailedAnalysis(results.analysis);
                    break;
            }
        });
    }

    /**
     * Pr√©visualiser le document
     */
    previewDocument(htmlContent) {
        // Ouvrir dans un nouvel onglet/fen√™tre pour pr√©visualisation
        const previewWindow = window.open('', '_blank');
        previewWindow.document.write(htmlContent);
        previewWindow.document.close();
        
        this.eventBus.emit('notification', {
            type: 'success',
            message: 'üëÅÔ∏è Document ouvert en pr√©visualisation'
        });
    }

    /**
     * T√©l√©charger le HTML
     */
    downloadHTML(htmlContent, analysis) {
        const fileName = `${analysis.metadata.fileName || 'ressource'}-accessible.html`;
        const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        this.eventBus.emit('notification', {
            type: 'success',
            message: `üì• ${fileName} t√©l√©charg√© avec succ√®s`
        });
    }

    /**
     * Exporter vers PDF
     */
    async exportToPDF(results) {
        try {
            const pdfConfig = this.universalPedagogyModel.generatePDFExportConfig(results.analysis);
            
            // Simulation de l'export PDF (en production, utiliser une vraie API)
            this.showProgress('G√©n√©ration du PDF...', 0);
            
            setTimeout(() => {
                this.showProgress('Configuration PDF...', 30);
                setTimeout(() => {
                    this.showProgress('Pr√©servation de l\'accessibilit√©...', 60);
                    setTimeout(() => {
                        this.showProgress('Finalisation...', 90);
                        setTimeout(() => {
                            this.showProgress('PDF g√©n√©r√© !', 100);
                            
                            // Simuler le t√©l√©chargement
                            const fileName = `${results.analysis.metadata.fileName || 'ressource'}-accessible.pdf`;
                            this.eventBus.emit('notification', {
                                type: 'success',
                                message: `üìÑ PDF accessible ${fileName} g√©n√©r√© avec succ√®s`
                            });
                            
                            // Afficher les d√©tails de la configuration PDF
                            this.showPDFConfiguration(pdfConfig);
                        }, 500);
                    }, 500);
                }, 500);
            }, 500);
            
        } catch (error) {
            this.showError('Erreur lors de l\'export PDF', error.message);
        }
    }

    /**
     * Afficher la configuration PDF
     */
    showPDFConfiguration(config) {
        const configContent = `
            <h4>üìÑ Configuration PDF Accessible</h4>
            <div style="text-align: left;">
                <h5>‚ôø Accessibilit√©</h5>
                <ul>
                    <li>‚úÖ PDF/UA compliant</li>
                    <li>‚úÖ √âl√©ments structurels</li>
                    <li>‚úÖ Texte alternatif</li>
                    <li>‚úÖ Ordre de lecture</li>
                    <li>‚úÖ Sp√©cification de langue</li>
                </ul>
                
                <h5>üîó Interactivit√©</h5>
                <ul>
                    <li>‚úÖ Liens pr√©serv√©s</li>
                    <li>‚úÖ Signets de navigation</li>
                    <li>‚úÖ Formulaires interactifs</li>
                    <li>‚úÖ Navigation structur√©e</li>
                </ul>
                
                <h5>üéØ Fonctionnalit√©s Disciplinaires</h5>
                <ul>
                    ${Object.entries(config.disciplinaryFeatures).map(([key, value]) => `
                        <li>‚úÖ ${key}: ${typeof value === 'boolean' ? (value ? 'Activ√©' : 'D√©sactiv√©') : value}</li>
                    `).join('')}
                </ul>
            </div>
        `;
        
        this.view.createModal('üìÑ Configuration PDF', configContent, [
            { text: 'Fermer', class: 'btn-primary', action: 'close-modal' }
        ]);
    }

    /**
     * Afficher l'analyse d√©taill√©e
     */
    showDetailedAnalysis(analysis) {
        const analysisContent = `
            <div style="text-align: left;">
                <h4>üìä Analyse Disciplinaire Compl√®te</h4>
                
                <div style="margin-bottom: 20px;">
                    <h5>üéØ Identification</h5>
                    <ul>
                        <li><strong>Discipline:</strong> ${analysis.discipline}</li>
                        <li><strong>Niveau:</strong> ${analysis.level}</li>
                        <li><strong>Type:</strong> ${analysis.contentType}</li>
                    </ul>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h5>üìö Objectifs P√©dagogiques</h5>
                    <ul>
                        ${Object.entries(analysis.pedagogicalObjectives).map(([type, obj]) => `
                            <li><strong>${type}:</strong> ${obj}</li>
                        `).join('')}
                    </ul>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h5>üîç √âl√©ments Visuels Identifi√©s</h5>
                    <ul>
                        ${analysis.visualElements.map(element => `<li>${element}</li>`).join('')}
                    </ul>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h5>üìñ Vocabulaire Sp√©cialis√©</h5>
                    <ul>
                        ${analysis.specializedVocabulary.slice(0, 5).map(vocab => `
                            <li><strong>${vocab.term}</strong> ${vocab.pronunciation} - ${vocab.definition}</li>
                        `).join('')}
                    </ul>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <h5>üîó Ressources Recherch√©es</h5>
                    <ul>
                        ${analysis.resourcesNeeded.map(resource => `
                            <li><strong>${resource.type}:</strong> ${resource.description}</li>
                        `).join('')}
                    </ul>
                </div>
                
                <div>
                    <h5>üéØ Comp√©tences Transversales</h5>
                    <div style="display: flex; flex-wrap: wrap; gap: 8px;">
                        ${analysis.transversalSkills.map(skill => `
                            <span style="background: #28a745; color: white; padding: 4px 8px; border-radius: 4px; font-size: 0.8em;">
                                ${skill}
                            </span>
                        `).join('')}
                    </div>
                </div>
            </div>
        `;
        
        this.view.createModal('üìä Analyse D√©taill√©e', analysisContent, [
            { text: 'Fermer', class: 'btn-primary', action: 'close-modal' }
        ]);
    }

    /**
     * G√©rer l'analyse disciplinaire
     */
    async handleDisciplineAnalysis(content) {
        try {
            const analysis = await this.universalPedagogyModel.analyzeDocument(content);
            
            this.eventBus.emit('notification', {
                type: 'success',
                message: `üéØ Discipline d√©tect√©e: ${analysis.discipline} (${analysis.level})`
            });
            
            return analysis;
        } catch (error) {
            this.showError('Erreur lors de l\'analyse', error.message);
        }
    }

    /**
     * G√©rer la g√©n√©ration de ressources
     */
    async handleResourceGeneration(analysis) {
        try {
            const resources = await this.universalPedagogyModel.searchDisciplinaryResources(analysis);
            
            this.eventBus.emit('notification', {
                type: 'success',
                message: `üîç ${resources.length} ressources trouv√©es pour ${analysis.discipline}`
            });
            
            return resources;
        } catch (error) {
            this.showError('Erreur lors de la recherche de ressources', error.message);
        }
    }

    /**
     * G√©rer les changements d'accessibilit√©
     */
    handleAccessibilityToggle(feature) {
        const accessibilityFeatures = this.universalPedagogyModel.accessibilityFeatures;
        
        if (accessibilityFeatures[feature]) {
            accessibilityFeatures[feature].enabled = !accessibilityFeatures[feature].enabled;
            
            this.eventBus.emit('notification', {
                type: 'info',
                message: `‚ôø ${accessibilityFeatures[feature].name} ${accessibilityFeatures[feature].enabled ? 'activ√©' : 'd√©sactiv√©'}`
            });
        }
    }

    /**
     * √âtendre les formats existants
     */
    extendExistingFormats() {
        const formats = ['interactive', 'genially', 'canva', 'elearning'];
        
        formats.forEach(format => {
            this.eventBus.emit('format:extend', {
                formatId: format,
                extensions: {
                    universalAccessibility: true,
                    disciplineDetection: true,
                    adaptiveContent: true,
                    miniGames: true
                }
            });
        });
    }

    /**
     * Ajouter les outils d'accessibilit√©
     */
    addAccessibilityTools() {
        const accessibilityPanel = {
            id: 'accessibility-panel',
            title: '‚ôø Accessibilit√© Universelle',
            tools: Object.entries(this.universalPedagogyModel.accessibilityFeatures).map(([key, feature]) => ({
                id: key,
                name: feature.name,
                description: feature.description,
                enabled: feature.enabled,
                action: () => this.handleAccessibilityToggle(key)
            }))
        };
        
        this.eventBus.emit('tools:add', accessibilityPanel);
    }

    /**
     * G√©rer les √©v√©nements du mod√®le
     */
    handleModelEvent(event, data) {
        switch (event) {
            case 'documentAnalyzed':
                this.onDocumentAnalyzed(data);
                break;
            case 'documentGenerated':
                this.onDocumentGenerated(data);
                break;
            case 'dataChanged':
                this.onDataChanged(data);
                break;
        }
    }

    /**
     * Quand un document est analys√©
     */
    onDocumentAnalyzed(analysis) {
        this.eventBus.emit('analytics:track', {
            event: 'document_analyzed',
            discipline: analysis.discipline,
            level: analysis.level,
            contentType: analysis.contentType
        });
    }

    /**
     * Quand un document est g√©n√©r√©
     */
    onDocumentGenerated(data) {
        const { analysis, html } = data;
        
        // Cr√©er une nouvelle ressource dans le syst√®me existant
        const resource = {
            title: analysis.metadata.title || 'Ressource Universelle Accessible',
            discipline: analysis.discipline,
            level: analysis.level,
            format: 'universal-accessible',
            content: html,
            accessibilityScore: this.universalPedagogyModel.validateAccessibility(html).score,
            features: {
                universalAccessibility: true,
                miniGames: true,
                adaptiveContent: true,
                multimodal: true
            }
        };
        
        this.models.resource.createResource(resource);
        
        this.eventBus.emit('analytics:track', {
            event: 'universal_document_generated',
            discipline: analysis.discipline,
            level: analysis.level,
            accessibilityScore: resource.accessibilityScore
        });
    }

    /**
     * Quand une ressource est cr√©√©e
     */
    onResourceCreated(resource) {
        if (resource.format === 'universal-accessible') {
            this.eventBus.emit('notification', {
                type: 'success',
                message: `‚ú® Ressource universelle "${resource.title}" cr√©√©e avec succ√®s`
            });
        }
    }

    /**
     * Afficher une erreur
     */
    showError(title, message) {
        this.eventBus.emit('notification', {
            type: 'error',
            message: `‚ùå ${title}: ${message}`
        });
    }

    /**
     * Obtenir les statistiques d'utilisation
     */
    getStatistics() {
        return {
            ...this.universalPedagogyModel.getUsageStatistics(),
            controllerStatus: 'active',
            integrationLevel: 100,
            supportedDisciplines: Object.keys(this.universalPedagogyModel.disciplines),
            accessibilityFeatures: Object.keys(this.universalPedagogyModel.accessibilityFeatures).length
        };
    }

    /**
     * D√©monstration des capacit√©s
     */
    async demonstrateCapabilities() {
        const demoContent = `
            # Les Fractions en CM1
            
            Une fraction repr√©sente une partie d'un tout. Elle s'√©crit avec deux nombres :
            - Le num√©rateur (en haut) : nombre de parties prises
            - Le d√©nominateur (en bas) : nombre total de parties
            
            Exemple : 3/4 signifie 3 parties sur 4.
            
            Exercice : Colorier 2/3 d'un rectangle.
        `;
        
        try {
            const result = await this.handleUniversalTransformation({
                content: demoContent,
                metadata: {
                    title: 'D√©monstration - Les Fractions',
                    type: 'demo'
                }
            });
            
            return result;
        } catch (error) {
            console.error('Erreur lors de la d√©monstration:', error);
        }
    }

    /**
     * Nettoyer les ressources
     */
    cleanup() {
        this.eventBus.off('universal-pedagogy:transform');
        this.eventBus.off('accessibility:toggle');
        this.eventBus.off('discipline:analyze');
        this.eventBus.off('resources:generate');
        
        if (this.universalPedagogyModel) {
            this.universalPedagogyModel.destroy();
        }
        
        console.log('üßπ Contr√¥leur IA P√©dagogique Universelle nettoy√©');
    }

    /**
     * Obtenir l'√©tat du contr√¥leur
     */
    getStatus() {
        return {
            active: this.isActive,
            currentAnalysis: this.currentAnalysis ? {
                discipline: this.currentAnalysis.discipline,
                level: this.currentAnalysis.level,
                timestamp: this.currentAnalysis.timestamp
            } : null,
            resourcesLoaded: this.currentResources.length,
            documentGenerated: !!this.generatedDocument,
            statistics: this.getStatistics()
        };
    }
}
